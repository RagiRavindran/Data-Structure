#include <stdio.h>
#include <stdlib.h>
#define COUNT 3 


struct node
{
int data;
struct node *left;
struct node *right;
};


struct node *newNode(int data)
{
struct node *temp = (struct node *) malloc(sizeof(struct node));
temp -> data = data;
temp -> left = NULL;
temp -> right = NULL;
return temp;
};


void insert_node(struct node *root, int n1, int n2, char lr)
{
if(root == NULL)
return;
if(root -> data == n1)
{
switch(lr)
{
case 'l' :root -> left = newNode(n2);
break;
case 'r' : root -> right = newNode(n2);
break;
}
}
else
{
insert_node(root -> left, n1, n2, lr);
insert_node(root -> right, n1, n2, lr);
}
}

void printTreeUtil(struct node *root, int space) 
{ 
    
    if (root == NULL) 
        return; 
  
    
    space += COUNT; 
  
    
    printTreeUtil(root->right, space); 
  
    printf("\n"); 
    for (int i = COUNT; i < space; i++) 
        printf(" "); 
    printf("%d\n", root->data); 
  
    
    printTreeUtil(root->left, space); 
} 
void printTree(struct node *root) 
{ 
   
   printTreeUtil(root, 0); 
} 


void inorder(struct node *root)
{
if(root == NULL)
return;
inorder(root -> left);
printf("%d ",root -> data);
inorder(root -> right);
}


void preorder(struct node *root)
{
if(root == NULL)
return;
printf("%d ",root -> data);
preorder(root -> left);
preorder(root -> right);
}


void postorder(struct node *root)
{
if(root == NULL)
return;
postorder(root -> left);
postorder(root -> right);
printf("%d ",root -> data);
}


int main()
{
struct node *root = NULL;
int n;
printf("\nEnter the number of edges : ");
scanf("%d",&n);
printf("\nInput the nodes of the binary tree in order \n\nparent-child-left(or)right-\n\n");
while(n--)
{
char lr;
int n1,n2;
scanf("%d %d %c",&n1,&n2,&lr);

if(root == NULL)
{
root = newNode(n1);
switch(lr)
{
case 'l' :root -> left = newNode(n2);
break;
case 'r' : root -> right = newNode(n2);
break;
}
}
else
{
insert_node(root,n1,n2,lr);
}
}
printTree(root);
printf("\nInorder Traversal : ");
inorder(root);
printf("\n");
printf("\nPreorder Traversal : ");
preorder(root);
printf("\n");
printf("\nPostorder Traversal : ");
postorder(root);
printf("\n");

return 0;
}
